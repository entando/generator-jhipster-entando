import React from 'react';
import { fireEvent, render, wait } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import { api<%= entityClass %>Post } from 'api/<%= entityInstancePlural %>';
import <%= entityClass %>AddFormContainer from 'components/<%= entityClass %>AddFormContainer';
import 'i18n/__mocks__/i18nMock';
import { <%= entityInstance %>MockAdd as <%= entityInstance %>Mock } from 'components/__mocks__/<%= entityInstance %>Mocks';

jest.mock('api/<%= entityInstancePlural %>');
jest.mock('@material-ui/pickers', () => {
  // eslint-disable-next-line react/prop-types
  const MockPicker = ({ id, value, name, label, onChange }) => {
    const handleChange = event => onChange(event.currentTarget.value);
    return (
      <span>
        <label htmlFor={id}>{label}</label>
        <input id={id} name={name} value={value || ''} onChange={handleChange} />
      </span>
    );
  };
  return {
    ...jest.requireActual('@material-ui/pickers'),
    DateTimePicker: MockPicker,
    DatePicker: MockPicker,
  };
});
<%_ if (fieldsContainBlob) { _%>
const dataURLtoFile = (dataurl, filename) => {
  const arr = dataurl.split(',');
  const mime = arr[0].match(/:(.*?);/)[1];
  const bstr = atob(arr[1]);
  let n = bstr.length;
  const u8arr = new Uint8Array(n);

  while(n){
    n -= 1;
    u8arr[n] = bstr.charCodeAt(n);
  }

  return new File([u8arr], filename, {type:mime});
};
<%_ } _%>

jest.mock('auth/withKeycloak', () => {
  const withKeycloak = Component => {
    return props => (
      <Component
        {...props} // eslint-disable-line react/jsx-props-no-spreading
        keycloak={{
          initialized: true,
          authenticated: true,
        }}
      />
    );
  };

  return withKeycloak;
});

describe('<%= entityClass %>AddFormContainer', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  const errorMessageKey = 'error.dataLoading';
  const successMessageKey = 'common.dataSaved';

  const onErrorMock = jest.fn();
  const onCreateMock = jest.fn();

  it('saves data', async () => {
    api<%= entityClass %>Post.mockImplementation(data => Promise.resolve(data));

    const { findByTestId, findByLabelText, queryByText, rerender } = render(
      <<%= entityClass %>AddFormContainer onError={onErrorMock} onUpdate={onCreateMock} />
    );

    <%_
    fields.forEach(field => {
      const fieldType = getJHipsterType(field);
      if (['ImageBlob', 'BinaryFileBlob'].includes(fieldType)) {
        const sampleFilename = `${field.fieldName}.${fieldType === 'ImageBlob' ? 'png': 'pdf'}`;
        const sampleFileType = fieldType === 'ImageBlob' ? 'image/png': 'application/pdf';
    _%>
    const <%= field.fieldName %>Field = await findByTestId('<%= field.fieldName %>-uploader');
    const <%= field.fieldName %>File = dataURLtoFile(`data:<%= sampleFileType %>;base64,${<%= entityInstance %>Mock.<%= field.fieldName %>}`, '<%= sampleFilename %>');
    fireEvent.change(<%= field.fieldName %>Field, { target: { files: [<%= field.fieldName %>File] } });
    <%_ } else if (fieldType === 'Boolean') { _%>
    if (<%= entityInstance %>Mock.<%= field.fieldName %>) {
      const <%= field.fieldName %>Field = await findByTestId('<%= entityInstance %>-<%= field.fieldName %>-checkbox');
      fireEvent.click(<%= field.fieldName %>Field);
    }
    <%_ } else if (!field.id) { _%>
    const <%= field.fieldName %>Field = await findByLabelText('entities.<%= entityInstance %>.<%= field.fieldName %>');
    fireEvent.change(<%= field.fieldName %>Field, { target: { value: <%= entityInstance %>Mock.<%= field.fieldName %> } });
    <%_
      }
    })
    _%>
    rerender(<<%= entityClass %>AddFormContainer onError={onErrorMock} onUpdate={onCreateMock} />);

    const saveButton = await findByTestId('submit-btn');

    fireEvent.click(saveButton);

    await wait(() => {
      expect(api<%= entityClass %>Post).toHaveBeenCalledTimes(1);
      expect(api<%= entityClass %>Post).toHaveBeenCalledWith('', <%= entityInstance %>Mock);

      expect(queryByText(successMessageKey)).toBeInTheDocument();

      expect(onErrorMock).toHaveBeenCalledTimes(0);
      expect(queryByText(errorMessageKey)).not.toBeInTheDocument();
    });
  }, 7000);

  it('shows an error if data is not successfully saved', async () => {
    api<%= entityClass %>Post.mockImplementation(() => Promise.reject());

    const { findByTestId, findByLabelText, queryByText, rerender } = render(
      <<%= entityClass %>AddFormContainer onError={onErrorMock} onUpdate={onCreateMock} />
    );

    <%_
    fields.forEach(field => {
      const fieldType = getJHipsterType(field);
      if (['ImageBlob', 'BinaryFileBlob'].includes(fieldType)) {
        const sampleFilename = `${field.fieldName}.${fieldType === 'ImageBlob' ? 'png': 'txt'}`;
        const sampleFileType = fieldType === 'ImageBlob' ? 'image/png': 'application/pdf';
    _%>
    const <%= field.fieldName %>Field = await findByTestId('<%= field.fieldName %>-uploader');
    const <%= field.fieldName %>File = dataURLtoFile(`data:<%= sampleFileType %>;base64,${<%= entityInstance %>Mock.<%= field.fieldName %>}`, '<%= sampleFilename %>');
    fireEvent.change(<%= field.fieldName %>Field, { target: { files: [<%= field.fieldName %>File] } });
    <%_ } else if (fieldType === 'Boolean') { _%>
    if (<%= entityInstance %>Mock.<%= field.fieldName %>) {
      const <%= field.fieldName %>Field = await findByTestId('<%= entityInstance %>-<%= field.fieldName %>-checkbox');
      fireEvent.click(<%= field.fieldName %>Field);
    }
    <%_ } else if (!field.id) { _%>
    const <%= field.fieldName %>Field = await findByLabelText('entities.<%= entityInstance %>.<%= field.fieldName %>');
    fireEvent.change(<%= field.fieldName %>Field, { target: { value: <%= entityInstance %>Mock.<%= field.fieldName %> } });
    <%_
      }
    })
    _%>
    rerender(<<%= entityClass %>AddFormContainer onError={onErrorMock} onUpdate={onCreateMock} />);

    const saveButton = await findByTestId('submit-btn');

    fireEvent.click(saveButton);

    await wait(() => {
      expect(api<%= entityClass %>Post).toHaveBeenCalledTimes(1);
      expect(api<%= entityClass %>Post).toHaveBeenCalledWith('', <%= entityInstance %>Mock);

      expect(queryByText(successMessageKey)).not.toBeInTheDocument();

      expect(onErrorMock).toHaveBeenCalledTimes(1);
      expect(queryByText(errorMessageKey)).toBeInTheDocument();
    });
  }, 7000);
});
