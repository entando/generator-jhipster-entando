import React from 'react';
import '@testing-library/jest-dom/extend-expect';
import { fireEvent, render, wait } from '@testing-library/react';
import i18n from 'i18n/__mocks__/i18nMock';
import { <%= entityInstance %>MockEdit as <%= entityInstance %>Mock } from 'components/__mocks__/<%= entityInstance %>Mocks';
import <%= entityClass %>Form from 'components/<%= entityClass %>Form';
import { createMuiTheme } from '@material-ui/core';
import { ThemeProvider } from '@material-ui/styles';

const theme = createMuiTheme();

describe('<%= entityClass %> Form', () => {
  it('shows form', () => {
    const { getByLabelText, getByTestId } = render(
      <ThemeProvider theme={theme}>
        <<%= entityClass %>Form <%= entityInstance %>={<%= entityInstance %>Mock} />
      </ThemeProvider>
    );

    <%_
      fields.forEach(field => {
        const fieldType = getJHipsterType(field);

        if(['ImageBlob', 'BinaryFileBlob'].includes(fieldType)) {
          return;
        }
    _%>
    <%_ if (field.id) { _%>
        expect(getByTestId('<%= entityInstance %>-<%= field.fieldName %>').value).toBe(<%= entityInstance %>Mock.<%= field.fieldName %>.toString());
    <%_ } else { _%>
    expect(getByLabelText('entities.<%= entityInstance %>.<%= field.fieldName %>').value).toBe(
      <%_ if(['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
        new Date(<%= entityInstance %>Mock.<%= field.fieldName %>).toLocaleString(i18n.language)
      <%_ } else if(fieldType === 'LocalDate') { _%>
        new Date(<%= entityInstance %>Mock.<%= field.fieldName %>).toLocaleDateString(i18n.language)
      <%_ } else if(fieldType === 'Boolean') { _%>
        '<%= entityInstance %>-active'
      <%_ } else if(['Integer','Long', 'BigDecimal', 'Float', 'Double'].includes(fieldType)) { _%>
        <%= entityInstance %>Mock.<%= field.fieldName %>.toString()
      <%_ } else { _%>
        <%= entityInstance %>Mock.<%= field.fieldName %>
      <%_ } _%>
    );
    <%_ }; _%>
    <%_ }); _%>
  });

  it('submits form', async () => {
    const handleSubmit = jest.fn();
    const { getByTestId } = render(
      <ThemeProvider theme={theme}>
        <<%= entityClass %>Form <%= entityInstance %>={<%= entityInstance %>Mock} onSubmit={handleSubmit} />
      </ThemeProvider>
    );

    const form = getByTestId('<%= entityInstance %>-form');
    fireEvent.submit(form);

    await wait(() => {
      expect(handleSubmit).toHaveBeenCalledTimes(1);
    });
  });
});
