import React from 'react';
import '@testing-library/jest-dom/extend-expect';
import { fireEvent, render } from '@testing-library/react';
import i18n from 'components/__mocks__/i18n';
import <%= entityInstance %>Mocks from 'components/__mocks__/<%= entityInstance %>Mocks';
import <%= entityClass %>Table from 'components/<%= entityClass %>Table';

describe('<%= entityClass %>Table', () => {
  it('shows <%= entityInstancePlural %>', () => {
    const { getByText } = render(<<%= entityClass %>Table items={<%= entityInstance %>Mocks} />);

    <%_
      fields.forEach(field => {
        const fieldType = getJHipsterType(field);

        if(['ImageBlob', 'BinaryFileBlob', 'Boolean', 'TextBlob'].includes(fieldType)) {
          return;
        }
        if(field.fieldIsEnum) {
          return;
        }
        mockData.forEach((singleItem, index) => { _%>
    expect(getByText(
      <%_ if(['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
        new Date(<%= entityInstance %>Mocks[<%= index %>].<%= field.fieldName %>).toLocaleString(i18n.language)
      <%_ } else if(fieldType === 'LocalDate') { _%>
        new Date(<%= entityInstance %>Mocks[<%= index %>].<%= field.fieldName %>).toLocaleDateString(i18n.language)
      <%_ } else if(['Integer','Long', 'BigDecimal', 'Float', 'Double'].includes(fieldType)) { _%>
          <%= entityInstance %>Mocks[<%= index %>].<%= field.fieldName %>.toString()
      <%_ } else { _%>
        <%= entityInstance %>Mocks[<%= index %>].<%= field.fieldName %>
      <%_ } _%>
    )).toBeInTheDocument();
        <%_ }) _%>

    <%_ }); _%>
  });

  it('shows no <%= entityInstancePlural %> message', () => {
    const { queryByText } = render(<<%= entityClass %>Table items={[]} />);

    <%_
      fields.forEach(field => {
        const fieldType = getJHipsterType(field);

        if(['ImageBlob', 'BinaryFileBlob', 'Boolean', 'TextBlob'].includes(fieldType)) {
          return;
        }
      mockData.forEach((singleItem, index) => { _%>
    expect(queryByText(
      <%_ if(['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
        new Date(<%= entityInstance %>Mocks[<%= index %>].<%= field.fieldName %>).toLocaleString(i18n.language)
      <%_ } else if(fieldType === 'LocalDate') { _%>
        new Date(<%= entityInstance %>Mocks[<%= index %>].<%= field.fieldName %>).toLocaleDateString(i18n.language)
      <%_ } else if(['Integer','Long', 'BigDecimal', 'Float', 'Double'].includes(fieldType)) { _%>
          <%= entityInstance %>Mocks[<%= index %>].<%= field.fieldName %>.toString()
      <%_ } else { _%>
        <%= entityInstance %>Mocks[<%= index %>].<%= field.fieldName %>
      <%_ } _%>
    )).not.toBeInTheDocument();
      <%_ }) _%>

    <%_ }); _%>

    expect(queryByText('entities.<%= entityInstance %>.noItems')).toBeInTheDocument();
  });

  it('calls onSelect when the user clicks a table row', () => {
    const onSelectMock = jest.fn();
    const { getByText } = render(
      <<%= entityClass %>Table items={<%= entityInstance %>Mocks} onSelect={onSelectMock} />
    );

    <%_
    const field = fields[0];
    if(field) {
      const fieldType = getJHipsterType(field);
    _%>
    fireEvent.click(getByText(
      <%_ if(['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
        new Date(<%= entityInstance %>Mocks[0].<%= field.fieldName %>).toLocaleString(i18n.language)
      <%_ } else if(fieldType === 'LocalDate') { _%>
        new Date(<%= entityInstance %>Mocks[0].<%= field.fieldName %>).toLocaleDateString(i18n.language)
      <%_ } else if(['Integer','Long', 'BigDecimal', 'Float', 'Double'].includes(fieldType)) { _%>
          <%= entityInstance %>Mocks[0].<%= field.fieldName %>.toString()
      <%_ } else { _%>
        <%= entityInstance %>Mocks[0].<%= field.fieldName %>
      <%_ } _%>
    ));
    expect(onSelectMock).toHaveBeenCalledTimes(1);
    <%_ } _%>
  });
});
