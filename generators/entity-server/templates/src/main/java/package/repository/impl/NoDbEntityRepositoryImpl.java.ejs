<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository.impl;

import <%= packageName %>.domain.<%= asEntity(entityClass) %>;
import <%= packageName %>.repository. <%= asEntity(entityClass) %>Repository;

import java.util.Optional;
<%_ if (pagination === 'no') { _%>
import java.util.List;
import java.util.ArrayList;
<%_ } _%>
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import org.springframework.stereotype.Repository;

import java.lang.UnsupportedOperationException;

@Repository
public class <%= entityClass %>RepositoryImpl implements <%= entityClass %>Repository {

    <%_ if (pagination === 'no') { _%>
    @Override
    public List<<%= asEntity(entityClass) %>> findAll() {
        return new ArrayList<<%= asEntity(entityClass) %>>();
    }
    <%_ } else { _%>
    @Override
    public Page<<%= asEntity(entityClass) %>> findAll(Pageable pageable) {
        return Page.empty(pageable);
    }
    <%_ } _%>

    <%_ if (relationshipsContainEagerLoad) { _%>
    @Override
    public Page<<%=asEntity(entityClass) %>> findAllWithEagerRelationships(Pageable pageable) {
        return Page.empty(pageable);
    }

    public List<<%=asEntity(entityClass) %>> findAllWithEagerRelationships() {
        return new ArrayList<<%= asEntity(entityClass) %>>();
    }

    public Optional<<%=asEntity(entityClass) %>> findOneWithEagerRelationships(<%= primaryKey.type %> id) {
        return Optional.empty();
    }
    <%_ } _%>
    @Override
    public Optional<<%= asEntity(entityClass) %>> findOne(<%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>) {
        return Optional.empty();
    }

    @Override
    public Optional<<%= asEntity(entityClass) %>> findById(<%= primaryKey.type %> id) {
        return Optional.empty();
    }

    @Override
    public void deleteById(<%= primaryKey.type %> id) { }

    @Override
    public boolean existsById(<%= primaryKey.type %> id) { return true; };

    @Override
    public <%= asEntity(entityClass) %> save(<%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>) {
        return <%= asEntity(entityInstance) %>;
    }

    @Override
    public <%= asEntity(entityClass) %> partialUpdate(<%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>) {
        return <%= asEntity(entityInstance) %>;
    }

    @Override
    public <%= asEntity(entityClass) %> update(<%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>) {
        return <%= asEntity(entityInstance) %>;
    }

}
